{"ast":null,"code":"var _jsxFileName = \"/Users/nathandolbir/ResearchSummer/superchat/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u269B\\uFE0F\\uD83D\\uDD25\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatRoom, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n\nfunction ChatRoom() {\n  _s();\n\n  const msgRef = firebase.firestore().collection('messages');\n  const [messages, setMessages] = useState([]);\n\n  function getMessages() {\n    msgRef.onSnapshot(querySnapshot => {\n      const docs = [];\n      querySnapshot.forEach(doc => {\n        docs.push(doc.data());\n      });\n      setMessages(docs);\n    });\n  }\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    await msgRef.add({\n      text: formValue,\n      createdAt: firebase.firestore().FieldValue.serverTimestamp(),\n      id: id\n    });\n    setFormValue('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"say something nice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"\\uD83D\\uDD4A\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ChatRoom, \"OwVcHHPk1TAUF5s/uW40HIa8G10=\");\n\n_c2 = ChatRoom;\n\nfunction ChatMessage(props) {\n  const {\n    text,\n    uid\n  } = props.message;\n  const messageClass = uid === firebase.auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'message ${messageClass}',\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = ChatMessage;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatRoom\");\n$RefreshReg$(_c3, \"ChatMessage\");","map":{"version":3,"sources":["/Users/nathandolbir/ResearchSummer/superchat/src/App.js"],"names":["React","useRef","useState","firebase","useAuthState","useCollectionData","App","ChatRoom","msgRef","firestore","collection","messages","setMessages","getMessages","onSnapshot","querySnapshot","docs","forEach","doc","push","data","formValue","setFormValue","sendMessage","e","preventDefault","add","text","createdAt","FieldValue","serverTimestamp","id","map","msg","target","value","ChatMessage","props","uid","message","messageClass","auth","currentUser"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from './firebase'\n\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header>\n          <h1>‚öõÔ∏èüî•üí¨</h1>\n        </header>\n\n        <ChatRoom/>\n\n        \n    </div>\n  );\n}\n\nfunction ChatRoom() {\n  const msgRef = firebase.firestore().collection('messages');\n  const [messages, setMessages] = useState([]);\n  function getMessages() {\n    msgRef.onSnapshot((querySnapshot) => {\n      const docs = [];\n      querySnapshot.forEach((doc) => {\n        docs.push(doc.data());\n      });\n      setMessages(docs);\n    });\n  }\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    await msgRef.add({\n      text: formValue,\n      createdAt: firebase.firestore().FieldValue.serverTimestamp(),\n      id: id\n    })\n\n    setFormValue('');\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n    </form>\n  </>)\n}\n\nfunction ChatMessage(props) {\n  const {text, uid} = props.message;\n  const messageClass = uid === firebase.auth.currentUser.uid ? 'sent' : 'received';\n  return (\n    <div className={'message ${messageClass}'}>\n  <p>{text}</p>\n  </div>)\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}